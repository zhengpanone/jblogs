============
1、设计原则
============

《UNIX/LINUX设计哲学》

SOLID 五大设计原则

- S - 单一职责原则

- O - 开闭原则

- L - 里氏替换原则

- I - 接口隔离原则

- D - 依赖倒置原则

- 迪米特法则(最少知道原则)

- 合成/复用原则(组合/复用原则)


1、单一职责原则
====================

定义: 不要存在多于一个导致类变更的原因

一个类/接口/方法只负责一项职责

优点: 降低类的复杂度、提高类的可读性、提高系统的可维护性、降低变更引起的风险




2、开闭原则
====================

定义:一个软件实体如类、模块和函数应该 **对扩展开发,对修改关闭**

用抽象构建框架,用实现扩展细节(**面向抽象编程**)

优点: 提高软件系统的可复用性及维护性


3、里氏替换原则
========================


接口隔离原则
======================

定义: 用多个专门的接口,而不使用单一的总接口,客户端不应该依赖它不需要的接口

一个类对一个类的依赖应该建立在最小的接口上

建立单一接口,不要建立庞大臃肿的接口

尽量细化接口,接口中的方法尽量少

优点: 符合高内聚低耦合的设计思想,从而使得类具有很好的可读性、可扩展和可维护性



依赖倒置原则
=======================

定义: 高层模块不应该依赖低层模块,二者都应该依赖其抽象

抽象不应该依赖细节;细节应该依赖抽象

针对接口编程,不要针对实现编程

优点: 可以减少类间的耦合性、提高系统稳定性,提高代码可读性和可维护性,可降低修改程序所造成的风险